.\"     Title: atlas
.\"    Author: Lucas Cram
.\"    Source: atlas-shell-tools 0.0.1
.\"  Language: English
.\"
.TH "ATLAS" "1" "1 December 2018" "atlas\-shell\-tools 0\&.0\&.1" "Atlas Shell Tools Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------

.SH "NAME"
.sp
atlas \-- Run an Atlas Shell Tools command

.SH "SYNOPSIS"
.sp
.nf
\fIatlas\fR [\-\-no-pager] [\-\-help[=<\fIcommand\fR>]]
\fIatlas\fR [\-V | \-\-version]
\fIatlas\fR [\-\-no-pager] [\-l | \-\-list]
\fIatlas\fR [\-\-class\-of=<\fIcommand\fR>]
\fIatlas\fR [\-\-quiet] [\-\-debug] cfg.preset <directive> [args...]
\fIatlas\fR [\-\-no\-pager] [\-\-debug] [\-\-memory=<amount>] [\-\-preset=<preset>] 
      [\-\-save\-preset=<new\-preset>] <\fIcommand\fR> [arg...]
.fi

.SH "DESCRIPTION"
.sp
\fBatlas\fR is an easy\-to\-use wrapper for launching Atlas Shell Tools commands.
It provides a simple interface to find and run any commands defined in the currently
activated Atlas Shell Tools module.
\fBatlas\fR also implements a robust preset management system, which can save
you tons of typing for commands that require a lot of options. See the \fBPRESETS\fR
section for more on this topic.
.sp
For advanced module management capabilites and other installation configuration
commands, see \fBatlas\-config\fR(1).
.sp
For a glossary of Atlas Shell Tools terms, see \fBatlas-glossary\fR(7).

.SH "OPTIONS"

.PP
<\fIcommand\fR>
.RS 4
This indicates a command. A list of available commands can be
seen with the \fB--list\fR option.
.RE

.PP
\fBcfg.preset\fR <directive> [args...]
.RS 4
This special subcommand puts \fBatlas\fR into preset configuration mode \- allowing
the user to run a preset configuration directive with some arguments. When the
option parser sees \fBcfg.preset\fR, it stops and passes any remaining ARGV elements into the
preset configuration engine. See the \fBPRESETS\fR section for more information.
.RE

.PP
\fB\-\-class\-of\fR=<\fIcommand\fR>
.RS 4
Show the full classname of a given command and then exit.
.RE

.PP
\fB\-\-debug\fR
.RS 4
Run \fBatlas\fR in debug mode. While in debug mode, \fBatlas\fR will not actually
run any commands. Instead, it will print debug diagnostics and exit. Use this
option to see what JVM command is actually running under the hood.
.RE

.PP
\fB\-\-help\fR[=<\fIcommand\fR>]\fR
.RS 4
Show the help menu for a given command. If no command is given, show
a general help menu and then exit.
.RE

.PP
\fB\-\-list\fR, \fB-l\fR
.RS 4
Display a list of all available commands and exit. Command name collision is
resolved when the active module index is generated. The resolution exists at
the index level only and is not reflected in the actual command
class files.
.RE

.PP
\fB\-\-memory\fR=<amount>, \fB\-m\fR<amount>
.RS 4
Set the maximum memory pool size for the JVM that runs your command.
<amount> should be specified in bytes. \fB--memory\fR also understands
shorthand for metric prefixes, e.g. 1024K, 512M, 4G, etc. If this option
is not supplied, the memory pool defaults to 8G.
.RE

.PP
\fB\-\-no\-pager\fR
.RS 4
Disable pagination for all documentation.
.RE

.PP
\fB\-\-preset\fR=<preset>, \fB\-p\fR<preset>
.RS 4
Apply the given preset before running <\fIcommand\fR>. See the \fBPRESETS\fR section
for more information.
.RE

.PP
\fB\-\-quiet\fR, \fB\-q\fR
.RS 4
Suppress non-essential \fBatlas\fR output.
.RE

.PP
\fB\-\-save\-preset\fR=<new\-preset>
.RS 4
Save the command ARGV to <new\-preset> before running <\fIcommand\fR>. If
\fB\-\-preset\fR is also supplied, the save operation will occur after the
argument to \fB\-\-preset\fR is applied. So <new\-preset> will include ARGV
elements inserted by the \fB\-\-preset\fR application in addition to those
directly supplied by the user. See the \fBPRESETS\fR section for more information.
.RE

.PP
\fB\-\-version\fR, \fB-V\fR
.RS 4
Show the \fBatlas\fR version info and then exit.
.RE
.sp

.SH "EXAMPLES"
.sp
Let's break down how to run a command called MyCommand with some args and options.
Here, '--opt1' is an option that takes no arguments. '--opt2' is an option that takes
an optional argument, so we use the '=' operator to disambiguate 'optarg2' from a regular
argument. '--opt3' is an option that takes a required argument, so \- if desired \- we
can omit the '=' when specifying 'optarg3'. Finally, 'arg1' and 'arg2' are regular
program arguments:
.sp
.RS 4
$ atlas MyCommand \-\-opt1 arg1 \-\-opt2=optarg2 arg2 --opt3 optarg3
.RE
.sp
See the manual page for MyCommand:
.sp
.RS 4
$ atlas \-\-help MyCommand
.RE
.sp
See a list of all available commands:
.sp
.RS 4
$ atlas \-\-list
.RE
.sp
Run MyCommand with preset 'p1':
.sp
.RS 4
$ atlas \-\-preset p1 MyCommand arg1 \-\-opt2=overridePresetArg
.RE
.sp
Edit preset 'p1' for MyCommand:
.sp
.RS 4
$ atlas cfg.preset edit:MyCommand p1
.RE

.SH "PRESETS"
.sp
\fBatlas\fR features a robust preset management system. Presets provide a way to save
command options (and long option arguments) for future application or modification.
For more information about how \fBatlas\fR saves and manipulates presets under
the hood, see \fBatlas\-plumbing\fR(5).
.sp
The preset interface is divided into 3 tiers. Each tier supports an increasing
number of potential use cases at the cost of added complexity for the user. The
tiers are designed such that you can stop at any tier you feel comfortable using
\- without needing to understand how the next tier up works. Each tier builds
on concepts introduced in the previous tiers.

The three interface tiers are:
.sp
.RS 4
\fBTier 1)\fR Basic preset creation and use with the \fB\-\-save\-preset\fR and \fB\-\-preset\fR options.

\fBTier 2)\fR More precise preset management with \fBcfg.preset\fR, including editing, copying, etc.

\fBTier 3)\fR Preset namespace management with \fBcfg.preset namespace\fR.
.RE

\fBTIER 1\fR
.RS 4
Tier 1 provides a simple, lightweight interface for preset usage through the
\fB\-\-preset\fR=\fIname\fR and \fB\-\-save\-preset\fR=\fInew\-name\fR options, where
\fIname\fR is the name of the preset you would like to apply and \fInew\-name\fR is
the name of the preset you would like to create.
.sp
When running a command with the \fB\-\-preset\fR=\fIname\fR option,
\fBatlas\fR checks the list of saved presets associated with that command.
If one of those presets matches with \fIname\fR, \fBatlas\fR uses that preset. If
\fBatlas\fR cannot find a match with \fIname\fR, it displays the list and exits
with an error.
.sp
When running a command with the \fB\-\-save\-preset\fR=\fInew\-name\fR option,
\fBatlas\fR attempts to save the current ARGV to a new preset called \fInew\-name\fR.
If \fInew\-name\fR already exists, \fBatlas\fR will exit with an error.
.sp
If both \fB\-\-preset\fR=\fIname\fR and \fB\-\-save\-preset\fR=\fInew\-name\fR
are applied at the same time, \fBatlas\fR will attempt to apply \fIname\fR before
saving \fInew\-name\fR. This allows you to easily save new presets that iterate
on a previously created preset.
.sp
Note that preset names are bound to the target command at save\-time \- 
a preset name without its command context is meaningless. This means that preset
"p1" for "ExampleCommand" and preset "p1" for "MyCommand" may contain
completely different values.
.sp
Let's look at an example of the Tier 1 interface in action.
We will run a command called "MyCommand" and assume preset "p1" does not yet exist:
.sp
.RS 4
$ atlas \-\-save\-preset=p1 MyCommand arg1 arg2 \-\-opt1 \-\-opt2=opt2Arg
.RE
.sp
This will save a preset "p1" for "MyCommand" with contents ["\-\-opt1", "\-\-opt2=opt2Arg"]
and then run the command. Note that the preset engine only saves options, and so will
automatically discard any ARGV element that does not look like an option. For this reason,
you \fImust\fR use the long option '=' syntax for specifying option arguments when saving
a preset.
.sp
Now that you have saved preset "p1" for "MyCommand", you can apply it like:
.sp
.RS 4
$ atlas \-\-preset=p1 MyCommand arg1 arg2
.RE
.sp
This will run the exact same command as before, but it saves us from having
to type out "\-\-opt1" and "\-\-opt2=opt2Arg". In addition to simply applying
a preset verbatim, you can also override a saved option by specifying it again
on the command line:
.sp
.RS 4
$ atlas \-\-preset=p1 MyCommand arg1 arg2 \-\-opt2=OverrideOpt2Arg
.RE
.sp
This will run the same command as the above 2 examples, except it will override
the preset value of \-\-opt2 with your new value "OverrideOpt2Arg".
.sp
Finally, you can extend presets by applying and saving at the same time. Here,
we apply our preset "p1" while also saving a new preset called "p2", based off
the contents of "p1":
.sp
.RS 4
$ atlas \-\-preset=p1 \-\-save\-preset=p2 MyCommand arg1 arg2 --opt2=OverrideOpt2Arg --opt3
.RE
.sp
The new preset "p2" will contain the following contents:
["\-\-opt1", "\-\-opt2=opt2Arg", "\-\-opt2=OverrideOpt2Arg", "\-\-opt3"]. Even though
\-\-opt2 is repeated, this is OK. When multiple instances of the same option are
supplied, the option parser will use ARGV's rightmost instance of that option.
.RE
.sp

\fBTIER 2\fR
.RS 4
Tier 2 provides more precise preset management using a special argument to \fBatlas\fR
called \fBcfg.preset\fR. \fBcfg.preset\fR takes a mandatory \fIdirective\fR,
which is just a verb specifying a configuration action. Note that many of the
directives require additional command context, which is specified using the ':'
operator (recall that preset names are meaningless without an associated command).
Below are the available directives:

.sp
.RS 4
\fBsave\fR:\fIcommand\fR <name> <args...>
.RS 4
Save a preset <name> for \fIcommand\fR without actually running the command.
<args...> is a sequence of options to be saved in the preset.
Again, recall that you must use the long option '=' syntax for specifying option
arguments when saving a preset. The following example saves preset "p1" to command
"MyCommand" with some options --opt1 and --opt2=opt2Arg:
.sp
.RS 4
$ atlas cfg.preset save:MyCommand p1 --opt1 --opt2=opt2Arg
.RE
.RE
.RE

.sp
.RS 4
\fBlist\fR:\fIcommand\fR [name]
.RS 4
List all presets for a given \fIcommand\fR, or list contents of preset [name]
for \fIcommand\fR. The following example lists the contents of preset "p1"
for command "MyCommand":
.sp
.RS 4
$ atlas cfg.preset list:MyCommand p1
.RE
.sp
Omitting the "p1" argument would have listed all presets for "MyCommand".
.RE
.RE

.sp
.RS 4
\fBremove\fR:\fIcommand\fR [name]
.RS 4
Remove all presets for a given command, or remove the preset [name] for
\fIcommand\fR. The following example removes all presets for command "MyCommand",
then removes preset "p1" for command "AnotherCommand":
.sp
.RS 4
$ atlas cfg.preset remove:MyCommand

$ atlas cfg.preset remove:AnotherCommand p1
.RE
.sp
.RE
.RE

.sp
.RS 4
\fBedit\fR:\fIcommand\fR <name>
.RS 4
Edit preset <name> for \fIcommand\fR. If <name> does not exist, then it will be
created when the edit is successfully saved. The default preset editor is \fBvim\fR,
but this can be changed by setting the \fBEDITOR\fR environment variable. The following
example will edit preset "p1" for command "MyCommand":
.sp
.RS 4
$ atlas cfg.preset edit:MyCommand p1
.RE
.RE
.RE

.sp
.RS 4
\fBcopy\fR:\fIcommand\fR <source> <destination>
.RS 4
Copy \fIcommand\fR preset <source> into new preset <destination>.
<destination> must not already exist, else the copy will fail. The following example
copies the preset "p1" into new preset "p2", for command "MyCommand":
.sp
.RS 4
$ atlas cfg.preset copy:MyCommand p1 p2
.RE
.sp
The \fBcopy\fR directive is useful in combination with the \fBedit\fR directive \-
when you want to have multiple versions of a large preset, each with some minor differences.
.RE
.RE

.sp
.RS 4
\fBnamespace\fR <subdirective> [namespace]
.RS 4
Execute a <subdirective> on a given preset [namespace]. Available subdirectives
are \fBlist\fR, \fBuse\fR, \fBcreate\fR, and \fBremove\fR. Preset namespaces \-
and the \fBnamespace\fR directive \- are explained in more detail in the
\fBTIER 3\fR section found below.
.RE
.RE
.RE
.sp

\fBTIER 3\fR
.RS 4
Tier 3 provides preset namespaces. A namespace creates an enclosing
scope for the presets associated with each command. For example, preset
"p1" for command "MyCommand" under "namespace1" and preset "p1" for command
"MyCommand" under "namespace2" may have completely different contents. Up to
this point, we have been working under the default namespace, appropriately
called "default". You can create and switch to new namespaces using the
\fBcfg.preset namespace\fR directive, which takes a subdirective to denote
the desired action. The available subdirectives are below:
.sp

.RS 4
\fBlist\fR
.RS 4
List all namespaces, highlighting the current namespace with a "*". An example
usage would look like:
.sp
.RS 4
$ atlas cfg.preset namespace list
.RE
.RE
.RE
.sp

.RS 4
\fBuse\fR <namespace>
.RS 4
Switch to <namespace>, throwing an error if <namespace> does not exist. Any new
presets you create will now be saved under <namespace>, and presets you apply
will be sourced from <namespace>. The following example switches to a namespace
called "namespace1":
.sp
.RS 4
$ atlas cfg.preset namespace use namespace1
.RE
.RE
.RE

.RS 4
\fBcreate\fR <namespace>
.RS 4
Create a new <namespace>, throwing an error if <namespace> already exists. This
will not actually switch to the new namespace. The following example creates a
namespace called "namespace1":
.sp
.RS 4
$ atlas cfg.preset namespace create namespace1
.RE
.RE
.RE

.RS 4
\fBremove\fR <namespace>
.RS 4
Delete a <namespace>, including all associated presets. The \fBremove\fR will
fail if <namespace> does not exist, if <namespace> is currently in-use, or if
<namespace> is the default namespace. The following example removes a namespace
called "namespace1":
.sp
.RS 4
$ atlas cfg.preset namespace remove namespace1
.RE
.RE
.RE

.RE
.sp

.SH "TERMINAL AND ENVIRONMENT"
.sp
\fBatlas\fR pages the output of the various help messages using a combination of
\fBless\fR and \fBman\fR. Subcommand help pages are piped through \fBless\fR
by default, but this can be overridden with the \fBPAGER\fR environment variable.
The actual \fBatlas\fR manual page (which you are currently reading) is displayed
using \fBman\fR. To disable paged output for all documentation, try the
\fB\-\-no\-pager\fR option.
.sp
\fBatlas\fR uses formatted output when appropriate. To change this behavior,
\fBatlas\fR checks for existence of the following environment variables:
.sp
.RS 4
\fBNO_COLOR\fR \-
Disable all special formatted output. Other popular CLI tools also
respect this variable. See https://no\-color.org/
.sp
\fBATLAS_SHELL_TOOLS_NO_COLOR\fR \-
Disable special formatted output for \fBatlas\fR and \fBatlas-config\fR only.
.sp
\fBATLAS_SHELL_TOOLS_USE_COLOR\fR \-
Enable special formatted output. Overrides the setting of \fBNO_COLOR\fR and \fBATLAS_SHELL_TOOLS_NO_COLOR\fR.
.sp
.RE
\fBatlas\fR stores program data in compliance with the XDG Base Directory
specification, i.e. at $HOME/.local/share/atlas-shell-tools. It also respects the
\fBXDG_DATA_HOME\fR environment variable - if set, \fBatlas\fR will store program
data at the base path specified by that variable. See \fBatlas\-plumbing\fR(5) for
more information.

.SH "SEE ALSO"
.sp
\fBatlas-config\fR(1)

.SH "AUTHOR"
.sp
This program was written by Lucas Cram <lucaspcram@gmail.com>.

.SH "BUGS"
.sp
Please report any bugs you find to the \fBAUTHOR\fR.

.SH "ATLAS SHELL TOOLS"
.sp
Part of the \fBatlas\-shell\-tools\fR(7) suite
