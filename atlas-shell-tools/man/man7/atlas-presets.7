.\"     Title: atlas-presets
.\"    Author: Lucas Cram
.\"    Source: atlas-shell-tools 1.0.0
.\"  Language: English
.\"
.TH "ATLAS-PRESETS" "7" "28 September 2020" "atlas\-shell\-tools 1\&.0\&.0" "Atlas Shell Tools Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------

.SH "NAME"
.sp
atlas\-presets \-\- Atlas Shell Tools preset interface

.SH "SYNOPSIS"
*

.SH "DESCRIPTION"
.sp
Atlas Shell Tools features a robust preset management system. Presets provide a way to save
command options (and long option arguments) for future application or modification.
For more information about how Atlas Shell Tools saves and manipulates presets under
the hood, see \fBatlas\-plumbing\fR(5).
.sp
The preset interface is divided into 3 tiers. Each tier supports an increasing
number of potential use cases at the cost of added complexity for the user. The
tiers are designed such that you can stop at any tier you feel comfortable using
\- without needing to understand how the next tier up works. Each tier builds
on concepts introduced in the previous tiers.

The three interface tiers are:
.sp
.RS 4
\fBTier 1)\fR Basic preset creation and use with \fBatlas\fR(1) options \fB\-\-save\-preset\fR and \fB\-\-preset\fR.

.RS 8
\fBGlobal Presets)\fR A brief addendum to Tier 1 about global preset saving.
.RE

\fBTier 2)\fR More precise preset management with \fBatlas-config-preset\fR(1), including editing, copying, etc.

\fBTier 3)\fR Preset namespace management with the \fBatlas-config-preset\fR(1) \fBnamespace\fR directive.
.RE

.SH "TIER 1"
Tier 1 provides a simple, lightweight interface for preset usage through the \fBatlas\fR(1) options
\fB\-\-preset\fR=\fInames\fR and \fB\-\-save\-preset\fR=\fInew\-name\fR, where
\fInames\fR are the name(s) of the preset(s) you would like to apply and \fInew\-name\fR is
the name of the preset you would like to create.
.sp
When running a command with the \fB\-\-preset\fR=\fInames\fR option,
\fBatlas\fR(1) checks the list of saved presets associated with that command.
If one of those presets matches with one of the given \fInames\fR, \fBatlas\fR(1) will apply that
preset. It will perform this check and application for each preset provided in \fInames\fR (which should
be comma or colon separated). If one of the given \fInames\fR does not refer to a saved preset,
\fBatlas\fR(1) displays the list of presets and exits with an error.
.sp
When running a command with the \fB\-\-save\-preset\fR=\fInew\-name\fR option,
\fBatlas\fR attempts to save the current ARGV to a new preset called \fInew\-name\fR.
If \fInew\-name\fR already exists, \fBatlas\fR(1) will exit with an error.
.sp
If both \fB\-\-preset\fR=\fInames\fR and \fB\-\-save\-preset\fR=\fInew\-name\fR
are applied at the same time, \fBatlas\fR(1) will attempt to apply \fInames\fR before
saving \fInew\-name\fR. This allows you to easily save new presets that iterate
on previously created presets.
.sp
Note that preset names are bound to the target command at save\-time \- 
a preset name without its command context is meaningless. This means that preset
"p1" for "ExampleCommand" and preset "p1" for "MyCommand" may contain
completely different values.
.sp
Let's look at an example of the Tier 1 interface in action.
We will run a command called "MyCommand" and assume preset "p1" does not yet exist:
.sp
.RS 4
$ atlas \-\-save\-preset=p1 MyCommand arg1 arg2 \-\-opt1 \-\-opt2=opt2Arg
.RE
.sp
This will save a preset "p1" for "MyCommand" with contents ["\-\-opt1", "\-\-opt2=opt2Arg"]
and then run the command. Note that the preset engine only saves options, and so will
automatically discard any ARGV element that does not look like an option. For this reason,
you \fImust\fR use the long option '=' syntax for specifying option arguments when saving
a preset (e.g. '--opt=arg' and \fInot\fR '--opt arg').
.sp
Now that you have saved preset "p1" for "MyCommand", you can apply it like:
.sp
.RS 4
$ atlas \-\-preset=p1 MyCommand arg1 arg2
.RE
.sp
This will run the exact same command as before, but it saves us from having
to type out "\-\-opt1" and "\-\-opt2=opt2Arg". In addition to simply applying
a preset verbatim, you can also override a saved option by specifying it again
on the command line:
.sp
.RS 4
$ atlas \-\-preset=p1 MyCommand arg1 arg2 \-\-opt2=OverrideOpt2Arg
.RE
.sp
This will run the same command as the above 2 examples, except it will override
the preset value of \-\-opt2 with your new value "OverrideOpt2Arg".
.sp
You can extend presets by applying and saving at the same time. Here,
we apply our preset "p1" while also saving a new preset called "p2", based off
the contents of "p1":
.sp
.RS 4
$ atlas \-\-preset=p1 \-\-save\-preset=p2 MyCommand arg1 arg2 --opt2=OverrideOpt2Arg --opt3
.RE
.sp
The new preset "p2" will contain the following contents:
["\-\-opt1", "\-\-opt2=opt2Arg", "\-\-opt2=OverrideOpt2Arg", "\-\-opt3"]. Even though
\-\-opt2 is repeated, this is OK. When multiple instances of the same option are
supplied, the option parser will use ARGV's rightmost instance of that option.
.sp
Let's look at one final example where we apply two presets at once. Assuming you now have
a preset "p3" with contents: ["\-\-opt3"], you could run:
.sp
.RS 4
$ atlas \-\-preset=p1,p3 MyCommand
.RE
.sp
This would run MyCommand with ["\-\-opt1", "\-\-opt2=opt2Arg", "\-\-opt3"] as the effective ARGV.
Note that the rightmost ARGV selection strategy for duplicate options applies here as well. Keep this in
mind when applying multiple presets that contain the same option.

.SS "Global Presets"
In addition to the presets tied to each command, you can also save global presets
using the \fBatlas\fR(1) option \fB\-\-save\-global\-preset\fR=\fInew\-name\fR. Global presets
can be applied to any command using the \fB\-\-preset\fR=\fInames\fR option.
When checking the \fInames\fR given to \fB\-\-preset\fR, the \fBatlas\fR(1) preset system will always attempt
to use global presets as a fall back. This means, for example, that if you have a preset "p1" for "MyCommand" as well
as global presets "p1" and "p2", supplying \fB\-\-preset=p1,p2\fR when running MyCommand will use the "p1" associated with "MyCommand",
but it will use the global preset "p2".
.sp
For the following examples, let's assume we have a command "MyCommand" with a preset "p1". We also have a command
"AnotherCommand" with no presets. Finally we have global presets "p1" and "p2".
.sp
The following will run "MyCommand" with its version of "p1" but with global "p2":
.sp
.RS 4
$ atlas \-\-preset=p1,p2 MyCommand
.RE
.sp
This next command will run "AnotherCommand" with globals "p1" and "p2":
.sp
.RS 4
$ atlas \-\-preset=p1,p2 AnotherCommand
.RE
.sp
Finally, this last command will fail since there is no preset "p3" associated with "MyCommand", nor is
there a global definition of "p3":
.sp
.RS 4
$ atlas \-\-preset=p1,p2,p3 MyCommand
.RE
.sp


.SH "TIER 2"
Tier 2 provides more precise preset management using the \fBatlas\-config\fR(1)
subcommand \fBpreset\fR. \fBatlas\-config\-preset\fR(1) takes a mandatory \fIdirective\fR,
which is just a verb specifying a configuration action. Note that many of the
directives require additional command context (recall that preset names are meaningless without an associated command).
Below are the available directives:

.sp
.RS 4
\fBcopy\fR \fIcommand\fR <source> <destination>
.RS 4
Copy \fIcommand\fR preset <source> into new preset <destination>.
<destination> must not already exist, else the copy will fail. The following example
copies the preset "p1" into new preset "p2", for command "MyCommand":
.sp
.RS 4
$ atlas\-config preset copy MyCommand p1 p2
.RE
.sp
The \fBcopy\fR directive is useful in combination with the \fBedit\fR directive \-
when you want to make multiple versions of a long preset, each with some minor differences.
.RE
.RE

.sp
.RS 4
\fBcopy\-global\fR <source> <destination>
.RS 4
Copy global preset <source> into new preset <destination>.
<destination> must not already exist, else the copy will fail. The following example
copies the global preset "p1" into new global preset "p2":
.sp
.RS 4
$ atlas\-config preset copy\-global p1 p2
.RE
.sp
Like the \fBcopy\fR directive, the \fBcopy\-global\fR is useful in combination
with the \fBedit\-global\fR directive for quick preset iteration.
.RE
.RE

.sp
.RS 4
\fBedit\fR \fIcommand\fR <name>
.RS 4
Edit preset <name> for \fIcommand\fR. If <name> does not exist, then it will be
created when the edit is successfully saved. The default preset editor is \fBvim\fR,
but this can be changed by setting the \fBATLAS_SHELL_TOOLS_EDITOR\fR environment variable.
The following example will edit preset "p1" for command "MyCommand":
.sp
.RS 4
$ atlas\-config preset edit MyCommand p1
.RE
.RE
.RE

.sp
.RS 4
\fBedit\-global\fR <name>
.RS 4
Edit global preset <name>. If <name> does not exist, then it will be
created when the edit is successfully saved. The default preset editor is \fBvim\fR,
but this can be changed by setting the \fBATLAS_SHELL_TOOLS_EDITOR\fR environment variable.
The following example will edit global preset "p1":
.sp
.RS 4
$ atlas\-config preset edit\-global p1
.RE
.RE
.RE

.sp
.RS 4
\fBlist\fR [\fIcommand\fR [name]]
.RS 4
List all available presets (including globals), or list all presets for a given [\fIcommand\fR], or
list contents of preset [name] for [\fIcommand\fR]. The following example lists
all available presets, then lists all presets for "MyCommand", and finally lists
the contents of preset "p1" for command "MyCommand":
.sp
.RS 4
$ atlas\-config preset list

$ atlas\-config preset list MyCommand

$ atlas\-config preset list MyCommand p1
.RE
.sp
.RE
.RE

.sp
.RS 4
\fBlist\-global\fR [name]
.RS 4
List all available global presets, or list contents of global preset [name]. The
following example lists all available global presets, then lists the contents of
global preset "p1":
.sp
.RS 4
$ atlas\-config preset list\-global

$ atlas\-config preset list\-global p1
.RE
.sp
.RE
.RE

.sp
.RS 4
\fBnamespace\fR <subdirective> [namespace]
.RS 4
Execute a <subdirective> on a given preset [namespace]. Available subdirectives
are \fBlist\fR, \fBuse\fR, \fBcreate\fR, and \fBremove\fR. Preset namespaces \-
and the \fBnamespace\fR directive \- are explained in more detail in the
\fBTIER 3\fR section found below.
.RE
.RE
.sp

.sp
.RS 4
\fBremove\fR \fIcommand\fR [name]
.RS 4
Remove all presets for a given \fIcommand\fR, or remove the preset [name] for
\fIcommand\fR. The following example removes all presets for command "MyCommand",
then removes preset "p1" for command "AnotherCommand":
.sp
.RS 4
$ atlas\-config preset remove MyCommand

$ atlas\-config preset remove AnotherCommand p1
.RE
.sp
.RE
.RE

.sp
.RS 4
\fBremove\-global\fR [name]
.RS 4
Remove all global presets , or remove the global preset [name].
The following example removes all global presets, then removes globa preset "p1":
.sp
.RS 4
$ atlas\-config preset remove\-global

$ atlas\-config preset remove\-global p1
.RE
.sp
.RE
.RE

.sp
.RS 4
\fBsave\fR \fIcommand\fR <name> <options...>
.RS 4
Save a preset <name> for \fIcommand\fR without actually running the command.
<options...> is a sequence of options to be saved in the preset.
Again, recall that you must use the long option '=' syntax for specifying option
arguments when saving a preset (e.g. '--opt=arg' and \fInot\fR '--opt arg').
The following example saves preset "p1" to command "MyCommand" with some options
--opt1 and --opt2=opt2Arg:
.sp
.RS 4
$ atlas\-config preset save MyCommand p1 --opt1 --opt2=opt2Arg
.RE
.sp
.RE
.RE

.sp
.RS 4
\fBsave\-global\fR <name> <options...>
.RS 4
Save a global preset <name>. <options...> is a sequence of options to be savedin the preset.
Again, recall that you must use the long option '=' syntax for specifying option
arguments when saving a preset (e.g. '--opt=arg' and \fInot\fR '--opt arg').
The following example saves global preset "p1" with some options
--opt1 and --opt2=opt2Arg:
.sp
.RS 4
$ atlas\-config preset save\-global p1 --opt1 --opt2=opt2Arg
.RE
.sp
.RE
.RE

.SH "TIER 3"
Tier 3 provides preset namespaces. A namespace creates an enclosing
scope for the presets associated with each command. For example, preset
"p1" for command "MyCommand" under "namespace1" and preset "p1" for command
"MyCommand" under "namespace2" may have completely different contents. Up to
this point, we have been working under the default namespace, appropriately
called "default". You can create and manage namespaces using the
\fBatlas\-config\-preset\fR(1) \fBnamespace\fR directive, which takes a subdirective to denote
the desired action. The available subdirectives are below:
.sp

.RS 4
\fBcreate\fR <namespace>
.RS 4
Create a new <namespace>, throwing an error if <namespace> already exists. This
will not actually switch to the new namespace. The following example creates a
namespace called "namespace1":
.sp
.RS 4
$ atlas\-config preset namespace create namespace1
.RE
.RE
.RE

.RS 4
\fBlist\fR [namespace]
.RS 4
List all namespaces while highlighting the current namespace with a "*", or list the contents of namespace [namespace].
The following example lists all namespaces, then lists the contents of namespace "namespace1".
.sp
.RS 4
$ atlas\-config preset namespace list

$ atlas\-config preset namespace list namespace1
.RE
.RE
.RE

.RS 4
\fBremove\fR <namespace>
.RS 4
Delete a <namespace>, including all associated presets. The \fBremove\fR will
fail if <namespace> does not exist, if <namespace> is currently in-use, or if
<namespace> is the default namespace. The following example removes a namespace
called "namespace1":
.sp
.RS 4
$ atlas\-config preset namespace remove namespace1
.RE
.RE
.RE

.RS 4
\fBuse\fR <namespace>
.RS 4
Switch to <namespace>, throwing an error if <namespace> does not exist. Any new
presets you create will now be saved under <namespace>, and presets you apply
will be sourced from <namespace>. The following example switches to a namespace
called "namespace1":
.sp
.RS 4
$ atlas\-config preset namespace use namespace1
.RE
.RE
.RE

.sp

.SH "ATLAS SHELL TOOLS"
.sp
Part of the \fBatlas\-shell\-tools\fR(7) suite
