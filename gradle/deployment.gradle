import org.gradle.plugins.signing.Sign

// nexusStaging {
//     delayBetweenRetriesInMillis = 5000
// }

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
            task.enabled = false
        }
    }
}

signing
{
    sign configurations.archives
}

publishing
{
    publications
    {
        mavenJava(MavenPublication)
        {
            pom
            {
                name = project_name
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = project_description
                url = project_url

                scm {
                    connection = project_scm
                    developerConnection = project_scm
                    url = project_url
                }

                licenses {
                    license {
                        name = project_license_slug
                        url = project_license_url
                    }
                }

                developers {
                    developer {
                        id = project_developer
                        name = project_developer
                    }
                }
            }
        }
    }
    repositories {
      // Hack: Deploy to a local repository first, then upload to Sonatype using scripts.
      maven {
        url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/" // maven2_url
        credentials {
          username System.getenv('SONATYPE_USERNAME')
          password System.getenv('SONATYPE_PASSWORD')
        }
      }
      maven {
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots" // snapshot_url
        name = "snapshot"
        credentials {
          username System.getenv('SONATYPE_USERNAME')
          password System.getenv('SONATYPE_PASSWORD')
        }
      }
    }
}
